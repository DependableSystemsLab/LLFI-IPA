/***************
DaikonFunctionPass.cpp
Author: Arijit Chattopadhyay, Abraham Chan
  This llvm pass is part of the greater LLFI framework
  
  Run the pass with the opt -daikontracepass option after loading LLFI.so
  
  This pass injects a function call before every non-void-returning, 
  non-phi-node instruction that prints trace information about the executed
  instruction to a file specified during the pass.
***************/

#include <vector>
#include <cmath>

#include "llvm/IR/Constants.h"
#include "llvm/IR/DerivedTypes.h"
#include "llvm/IR/GlobalValue.h"
#include "llvm/Pass.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/Module.h"
#include "llvm/IR/Instruction.h"
#include "llvm/IR/Instructions.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/Support/InstIterator.h"
#include "llvm/Support/CommandLine.h"
#include "llvm/IR/DataLayout.h"

#include "Utils.h"

using namespace llvm;


#include <string>
#include <vector>
#include <set>
#include <fstream>
#include <algorithm>
using namespace std;


//cl::opt<bool> debugtrace("debugtrace",
//              cl::desc("Print tracing instrumented instruction information"),
//              cl::init(false));
//cl::opt<int> maxtrace2( "maxtrace2",
//    cl::desc("Maximum number of dynamic instructions that will be traced after fault injection"),
//            cl::init(1000));

namespace llfi {

struct FaultTrace : public FunctionPass {

  static char ID;
  static bool isInit;

  vector<Value*>  globalList;
  vector<string> doNotInstrumentFunctions;
  vector<string> programPoints;
  Type *voidType;
  IntegerType *int8Type; 	
  IntegerType *int32Type;
  IntegerType *int64Type;
  PointerType *ptr8Type; 
  PointerType *ptr32Type;
  PointerType *ptr64Type;

  PointerType *ptrPtr32Type;
  PointerType *ptrPtr64Type;

  PointerType *ptrFloatType;
  PointerType *ptrDoubleType;
  PointerType *ptrPtrFloatType;
  PointerType *ptrPtrDoubleType;

  StructType *structType;
  PointerType *ptrStructType;
  PointerType *ptrPtrStructType;

  FunctionType *functionType;
  Value *clapDummyVar;
	


  FaultTrace() : FunctionPass(ID) {}

  //Add AnalysisUsage Pass as prerequisite for FaultTrace Pass
  virtual void getAnalysisUsage(AnalysisUsage &AU) const {
    AU.addRequired<DataLayout>();
  }

  virtual bool doInitialization(Module &M) {
    return false;
  }

  virtual bool doFinalization(Module &M) {
    //Dont forget to delete the output filename string!
    Function* mainfunc = M.getFunction("main");
    if (mainfunc == NULL) {
      errs() << "ERROR: Function main does not exist, " <<
          "which is required by LLFI\n";
      exit(1);
    }

    LLVMContext &context = M.getContext();
    FunctionType *postinjectfunctype = FunctionType::get(
        Type::getVoidTy(context), false); 
    Constant *postracingfunc = M.getOrInsertFunction("postDaikonTracing",
                                             postinjectfunctype);

    std::set<Instruction*> exitinsts;
    getProgramExitInsts(M, exitinsts);
    assert (exitinsts.size() != 0 
            && "Program does not have explicit exit point");

    for (std::set<Instruction*>::iterator it = exitinsts.begin();
         it != exitinsts.end(); ++it) {
      Instruction *term = *it;
      CallInst::Create(postracingfunc, "", term);
    }

    return true;
  }

  long fetchLLFIInstructionID(Instruction *targetInst) {
    return llfi::getLLFIIndexofInst(targetInst);
  }


//Helper methods

void doInit(Module *module) {
	
	voidType = Type::getVoidTy(module->getContext());
	int8Type  = IntegerType::get(module->getContext(),8);
	int32Type = IntegerType::get(module->getContext(),32);
	int64Type = IntegerType::get(module->getContext(),64);
	ptr8Type  = PointerType::get(int8Type,0);
	ptr32Type = PointerType::get(int32Type,0);
	ptr64Type = PointerType::get(int64Type,0);

	ptrPtr32Type = PointerType::get(ptr32Type,0);
	ptrPtr64Type = PointerType::get(ptr64Type,0);

	ptrFloatType = Type::getFloatPtrTy(module->getContext());
	ptrDoubleType = Type::getDoublePtrTy(module->getContext());
	ptrPtrFloatType = PointerType::get(ptrFloatType,0);
	ptrPtrDoubleType = PointerType::get(ptrDoubleType,0);

	structType = StructType::get(module->getContext());
	ptrStructType = PointerType::get(structType,0);
	ptrPtrStructType = PointerType::get(ptrStructType,0);

	functionType = FunctionType::get(voidType,true);
	isInit = true;
}

void populateGlobals(Module *module) {
	globalList.clear();
	for(Module::global_iterator globalItr = module->global_begin(); globalItr != module->global_end(); ++globalItr) {
		GlobalVariable *globalVar = &*globalItr;
		//errs()<<"Global Variable name : "<<globalVar->getName()<<"\n";
		if(globalVar->hasInitializer()) {
			if(globalVar->hasName() && globalVar->getName().equals("__clapDummyGlobalVar")) {
				clapDummyVar = dyn_cast<Value>(globalVar);
				assert(clapDummyVar != NULL);			
				continue;
			}
			string type1 = getTypeString(globalVar->getInitializer()->getType());
			//string type2 = getTypeString(globalVar->getType());
			if(type1 == "int" || type1 == "int*" || type1 == "double" || type1 == "double*"
				 || type1 == "struct" || type1 == "struct*") {
				Value *val = static_cast<Value*>(globalVar);
				globalList.push_back(val);
			}
			//globalList.push_back(globalVar);
			//errs()<< "Variable : "<< globalVar->getName() << "\t" << getTypeString(globalVar->getInitializer()->getType()) << "\t"<< *globalVar <<"\n";
		}


	}
} 


bool isGlobal(Value *value) {
	for(vector<Value*>::iterator itr = globalList.begin(); itr != globalList.end() ; ++itr) {
		Value *v = *itr;
		if(value == v) { 
			return true;
		}
	}
	return false;
}

bool isSupportedType(StringRef typeName){
	if (typeName.equals("int") || typeName.equals("double") || typeName.equals("float") ||
		typeName.equals("int*") || typeName.equals("double*")) {
		return true;
	}
	return false;
}

void putTabInFile(fstream &stream, int tabCount) {
	if(stream.is_open()) {
		for(int i = 0 ; i  < tabCount; ++i) {
			stream<<" ";
		}
	}
}

bool isFileEmpty(fstream &inputFile) {
	return ( inputFile.peek() == istream::traits_type::eof() );
}

Value* getValueForString(StringRef variableName,Module *module) {
	Constant *valueName = ConstantDataArray::getString(module->getContext(), variableName,true);
	Value *val = new GlobalVariable(*module,valueName->getType(), true, GlobalValue::InternalLinkage,valueName);
	return val;
}

string find_and_replace(string source, const char find, const string replace) {
	for(string::size_type i = 0; (i = source.find(find, i)) != string::npos;)
	{
		source.replace(i, 1, replace);
		i += replace.length();
	}
	return source;
}

string demangle(const char* name) {
        int status = -1; 

        unique_ptr<char, void(*)(void*)> res { abi::__cxa_demangle(name, NULL, NULL, &status), free };
        return (status == 0) ? res.get() : string(name);
}

string getDemangledFunctionName(const char* name) {
	string funcName = demangle(name);
	if (funcName == "main") {
		funcName = funcName.append("()");
	}
	return find_and_replace(string(funcName), ' ', "\\_");
}


string getTypeString(Value *value) {
        return getTypeString(value->getType());
}


string getTypeString(Type *type) {
	switch(type->getTypeID()) {
		case Type::IntegerTyID:{
					       IntegerType *intType=static_cast<IntegerType*>(type);
					       if(intType->getBitWidth() == 8) {
						       return "char";
					       }else if(intType->getBitWidth() == 32|| 
							       intType->getBitWidth() == 64){
						       return "int";
					       }else {
						       return "int";
					       }
				       }

		case Type::FloatTyID:{
					     return "float";
				     }

		case Type::DoubleTyID:  {
						return "double";
					}

		case Type::PointerTyID:{
					 	PointerType *ptrType = static_cast<PointerType*>(type);
					       	if(ptrType  ==  ptr32Type || ptrType == ptr64Type) {
					               	return "int*";
					       	}else if(ptrType == ptr8Type) {
					       		return "char*";
					       	}else if(ptrType == ptrPtr32Type || ptrType == ptrPtr64Type) {
					       		return "int**";
						}else if(ptrType == ptrFloatType) {
					       		return "float*";
						}else if(ptrType == ptrDoubleType) {
					       		return "double*";
						}else if(ptrType == ptrPtrFloatType) {
					       		return "float**";
						}else if(ptrType == ptrPtrDoubleType) {
					       		return "double**";
						}else if(ptrType == ptrStructType) {
					       		return "struct*";
						}else if(ptrType == ptrPtrStructType) {
					       		return "struct**";
					       	}else {
					               	return "pointer";
					       	}
				       }
		case Type::ArrayTyID:  {
						return "array";
					}
		case Type::StructTyID:  {
						return "struct";
					}
		case Type::VectorTyID:  {
						return "vector";
					}
		default:  {
					//errs()<<"Unable to identify type : "<<type->getTypeID()<<"\n";
			}

	}
	return "unknown";
}


virtual bool runOnFunction(Function &F) {

	if (!isInit) {
		
		Module *module = F.getParent();	
		doInit(module);

		//populateGlobals(module);

		//generateProgramPoints(module);
		//loadProgramPoints(module);
	}

	//dumpDeclFileAtEntryAndExit(&F,"ENTRY");
	//dumpDeclFileAtEntryAndExit(&F,"EXIT");
	

	hookAtFunctionStart(&F);
	hookAtFunctionEnd(&F);

	//insertVariableTrace(&F);

	//string funcName(F.getName().trim().data());
	//if(find(programPoints.begin(), programPoints.end(),funcName) != programPoints.end()) {
	//insertDynamicCallAtGlobalAccess(&F);
	//}

	

	return true;

}



/**
 * This Function will hook at the beginning of every Function
 */
void hookAtFunctionStart(Function *func) {

	Module *module = func->getParent();

	vector<Value*> Arguments;
	/**
	 * We will Handle only Integer/Float/Double/Array types and ignore all others for time begin
	 */
	for(Function::arg_iterator argItr = func->arg_begin(); argItr != func->arg_end(); ++argItr) {
		Argument *arg = &*argItr;
		Value *val = static_cast<Value*>(arg);
		StringRef retType(getTypeString(val));
		if (isSupportedType(retType)) {
		 	Arguments.push_back(val);
		}
		//Arguments.push_back(val);
		//errs()<< "Variable : "<< *getValueForString(val->getName(),module) << *val <<"\n";
	}


	//int totalArgumentSize = Arguments.size()+globalList.size();
	int totalArgumentSize = Arguments.size();

	
	
	/**
	 * So far the format is varcount,function name, then globals, function params
	 * The var count will count globals and function params but not the function name
	 */

	Function *hookFunctionBegin = cast<Function>(module->getOrInsertFunction("clap_hookFuncBegin",functionType));
	vector<Value*> argList;
	Constant *argCount = ConstantInt::get(module->getContext(),APInt(32,totalArgumentSize,true));
	argList.push_back(argCount);

	//Send the function name
	string funcNameStr = func->getName().str();
	string finalNameToSend=".."+getDemangledFunctionName(funcNameStr.c_str())+":::ENTER";
	StringRef finalNameToSendRef (finalNameToSend.c_str());
	Value *funcNameValue = getValueForString(finalNameToSendRef,module);
	argList.push_back(funcNameValue);
	
	/**
	 * The format is  varname -vartype-varvalue
	 */
	//First Send the global values
	//We don't have to check the type of global value because
	//We are inserting only integer global parameters
	//So they will always be int.
	/*for(vector<Value*>::iterator globalItr = globalList.begin(); globalItr != globalList.end() ; ++globalItr) {
		Value *val = *globalItr;
		GlobalVariable *gVal = static_cast<GlobalVariable*>(val);
		//GlobalVariable *gVal = static_cast<GlobalVariable>(val);
		string valNameStr = "::"+val->getName().str();
                Value *valName = getValueForString(StringRef(valNameStr.c_str()),module);
	        Value *type=getValueForString(StringRef(getTypeString(gVal->getInitializer()->getType()).c_str()).trim(),module);
		//Value *type=getValueForString(StringRef("int"),module);
		argList.push_back(valName);
		argList.push_back(type);
		argList.push_back(gVal);
	}*/

	//Now Send the parameters
	for(vector<Value*>::iterator ArgItr = Arguments.begin(); ArgItr != Arguments.end(); ++ArgItr) {
		Value *val= *ArgItr;
		Value *valName = getValueForString(val->getName(),module);
		string typeStr = getTypeString(val);
		Value *type=getValueForString(StringRef(typeStr.c_str()).trim(),module);
		argList.push_back(valName);
		argList.push_back(type);
		argList.push_back(val);
	}

	Instruction *target = NULL;
        /*for(inst_iterator instItr = inst_begin(func); instItr != inst_end(func); ++instItr) {
		if(StoreInst *globSt = dyn_cast<StoreInst>(&*instItr)) {
			Value *ptrOp = globSt->getPointerOperand();
			if(ptrOp && ptrOp == clapDummyVar) {
				++instItr;
				if(CallInst *callInst = dyn_cast<CallInst>(&*instItr)) {
					if(callInst->getCalledFunction()->getName().trim().equals("clap_store_post")) {
						++instItr;
						if(instItr != inst_end(func)) {
							target = &*instItr;
							break;
						}
					}
				}
			}
		
		}
	
	}*/

	//To disable this instrumentation and follow the old approach then the comment out
	//the function call to insertDummyStoreIntoFunction
	Instruction *hookFunctionBeginInstruction = CallInst::Create(hookFunctionBegin,argList);
	/*if(target != NULL) {
		hookFunctionBeginInstruction->insertBefore(target);
	}else {
		//This is for old approach where the global clap variable is not inserted.
		for(inst_iterator institr = inst_begin(func); institr!= inst_end(func); ++institr) {
			Instruction *ii = &*institr;
			if(!isa<AllocaInst>(ii)) {
				target = ii;
				break;
			}
		}
		hookFunctionBeginInstruction->insertBefore(target);
	}*/

	for(inst_iterator institr = inst_begin(func); institr!= inst_end(func); ++institr) {
		Instruction *ii = &*institr;
		if(!isa<AllocaInst>(ii)) {
			target = ii;
			break;
		}
	}
	hookFunctionBeginInstruction->insertBefore(target);



}



void hookAtFunctionEnd(Function *func) {

	Module *module = func->getParent();

	vector<Value*> Arguments;
	/**
	 * We will Handle only Integer types and ignore all others for time begin
	 */
	for(Function::arg_iterator argItr = func->arg_begin(); argItr != func->arg_end(); ++argItr) {
		Argument *arg = &*argItr;
		Value *val = static_cast<Value*>(arg);
		StringRef retType(getTypeString(val)) ;
		if(isSupportedType(retType)) {
		 	Arguments.push_back(val);
		}
	}

	//int totalArgumentSize = Arguments.size()+globalList.size();
	int totalArgumentSize = Arguments.size();
	

	/**
	 * So far the format is varcount,function name, then globals, function params
	 * The var count will count globals and function params but not the function name
	 */
 
	//First Check the return type
	bool hasReturn = false;
	StringRef returnTypeRef( getTypeString(func->getReturnType()));
	if(isSupportedType(returnTypeRef)) {
		hasReturn = true;
	}

	//Now standard process
	Function *hookFunctionEnd = cast<Function>(module->getOrInsertFunction("clap_hookFuncEnd",functionType));
	vector<Value*> argList;
	Constant *argCount ; 
	if(hasReturn) {
		//One extra for return type
		argCount = ConstantInt::get(module->getContext(),APInt(32,totalArgumentSize+1,true));
	}else {
		argCount = ConstantInt::get(module->getContext(),APInt(32,totalArgumentSize,true));
	}

	argList.push_back(argCount);


	//Send the function name
	string funcNameStr = func->getName().str();
	string finalNameToSend=".."+getDemangledFunctionName(funcNameStr.c_str())+":::EXIT0";
	StringRef finalNameToSendRef (finalNameToSend.c_str());
	Value *funcNameValue = getValueForString(finalNameToSendRef,module);
	argList.push_back(funcNameValue);
	
	/**
	 * The format is  varname -vartype-varvalue
	 */
	//First Send the global values
	//Please see the documentation in the hookAtFunctionStart
	//Methods. Detail information is available there.
	/*for(vector<Value*>::iterator globalItr = globalList.begin(); globalItr != globalList.end() ; ++globalItr) {
		Value *val = *globalItr;
		GlobalVariable *gVal = static_cast<GlobalVariable*>(val);
		string valNameStr = "::"+val->getName().str();
                Value *valName = getValueForString(StringRef(valNameStr.c_str()),module);
		Value *type=getValueForString(StringRef(getTypeString(gVal->getInitializer()->getType()).c_str()).trim(),module);
		//Value *type=getValueForString(StringRef("int"),module);
		argList.push_back(valName);
		argList.push_back(type);
		argList.push_back(gVal);

	}*/

	//Now Send the parameters
	//for(Function::arg_iterator argItr = func->arg_begin(); argItr != func->arg_end(); ++argItr) {
	for(vector<Value*>::iterator ArgItr = Arguments.begin(); ArgItr != Arguments.end(); ++ArgItr) {
		Value *val= *ArgItr;
		Value *valName = getValueForString(val->getName(),module);
		string typeStr = getTypeString(val);
		Value *type=getValueForString(StringRef(typeStr.c_str()).trim(),module);
		argList.push_back(valName);
		argList.push_back(type);
		argList.push_back(val);
	}

	//First find the return instruction and push the return value if the return is int type
	Instruction *target = NULL;
	for(Function::iterator bbItr = func->begin(); bbItr != func->end(); ++bbItr) {
		Instruction *ii = bbItr->getTerminator();
		if(isa<ReturnInst>(ii)) {
			target= ii;
			break;
		}
	}

	if(hasReturn) {
		ReturnInst *retInst = static_cast<ReturnInst*>(target);
		Value *val= retInst->getReturnValue();
		Value *valName = getValueForString("return",module);
		Value *type=getValueForString(StringRef(getTypeString(val).c_str()).trim(),module);
		argList.push_back(valName);
		argList.push_back(type);
		argList.push_back(val);
	}

	Instruction *hookFunctionEndInstruction = CallInst::Create(hookFunctionEnd,argList);
	hookFunctionEndInstruction->insertBefore(target);


}



/**
 * This Function inserts instructions at global variables access which will fake a function call in Daikon perspective.
 * Using this we are able generate invariants at global variables access
 */
void insertDynamicCallAtGlobalAccess(Function *func) {
	Module *module = func->getParent();

	int space = 1;

        //The space is not sent then it will be initialized to -1
	//In that case it will follow the old schedule
	if(space == -1 ) {

	} else {
		//If the space is 0 then it will record every global read and write
		//1 means there will be gap of 1 instruction
		errs()<<"Value of the spacer is "<<space<<"\n";
		errs()<<"Modifying for the function "<<func->getName()<<"\n";
		vector<Instruction*> loadAndStores;

		for(inst_iterator instItr = inst_begin(func); instItr != inst_end(func); ++instItr) { 
			if(isa<StoreInst>(&*instItr) || isa<LoadInst>(&*instItr)) {
				Instruction *ii = &*instItr;
				Value *ptrOp =NULL;
				if(isa<StoreInst>(ii)) {
					StoreInst *st_ii = dyn_cast<StoreInst>(ii);
					ptrOp = st_ii->getPointerOperand();
				}else if(isa<LoadInst>(ii)){
					LoadInst *ld_ii = dyn_cast<LoadInst>(ii);
					ptrOp = ld_ii->getPointerOperand();
				}
				if(ptrOp == NULL || !isGlobal(ptrOp)) {
					continue;
				}
				loadAndStores.push_back(ii);
			}
		}
		errs()<<"Load and Store size : "<<loadAndStores.size()<<"\n";
		if(loadAndStores.size() > 0) {
			for(vector<Instruction*>::iterator lstItr = loadAndStores.begin(); lstItr != loadAndStores.end(); ++lstItr) { 
				vector<Instruction*> internal;
			       	vector<string> globVarSet;
				int count = 0 ;
				for(vector<Instruction*>::iterator itr = lstItr; count <= space && itr != loadAndStores.end()
						; ++count,++itr) {
					Instruction *ii =  *itr;
					Value *ptrOp =NULL;
					if(isa<StoreInst>(ii)) {
						StoreInst *st_ii = dyn_cast<StoreInst>(ii);
						ptrOp = st_ii->getPointerOperand();
					}else if(isa<LoadInst>(ii)){
						LoadInst *ld_ii = dyn_cast<LoadInst>(ii);
						ptrOp = ld_ii->getPointerOperand();
					}
					//Now this will be global
					GlobalVariable *glVar = dyn_cast<GlobalVariable>(ptrOp);
					assert(glVar != NULL);
				
					string tt = getTypeString(glVar->getInitializer());


					if(ptrOp != NULL && ptrOp->hasName() && 
							!(ptrOp->getName().equals("__clapDummyGlobalVar"))
							&& isGlobal(ptrOp)) {
							//&& tt == "int") {
						internal.push_back(ii);				
						errs()<<"Inserting : "<<*ptrOp<<"\n";
						if(find(globVarSet.begin(),globVarSet.end(),
									ptrOp->getName().trim().str()) == globVarSet.end()) {

							globVarSet.push_back(ptrOp->getName().trim().str());
						}
						//globVarSet.insert(ptrOp->getName().trim().str());
					}
				}


				if(internal.size() > 0){

					string functionName = func->getName().str();
					


					//We have to generate the op set as some operand may be repeated with in the 
					//expected CS
					vector<Value*> operandSet;
					for(vector<Instruction *>::iterator opCreateItr = internal.begin(); opCreateItr != internal.end();
							++opCreateItr) {
						Value *pointer = NULL;
						if(StoreInst *st = dyn_cast<StoreInst>(*opCreateItr)) {
							pointer = st->getPointerOperand();
						}else if(LoadInst *ld = dyn_cast<LoadInst>(*opCreateItr)) {
							pointer = ld->getPointerOperand();
						}else {
							errs()<<"Impossible case\n";
						}
						//errs()<<"Name of the pointer op "<<pointer->getName()<<"\n";
						string opName = pointer->getName().trim().str();
						bool flag = false;
						for(vector<Value*>::iterator opSetItr = operandSet.begin(); opSetItr != operandSet.end(); ++opSetItr) {
							Value *v = *opSetItr;
							if(v->hasName()) {
								StringRef s = v->getName();
								if(s.equals(pointer->getName())) {
									flag = true;
									break;

								}
							}
						}
						if(!flag) {
							operandSet.push_back(pointer);
						}

					}
					assert(operandSet.size() == globVarSet.size());



					
				       // // Now insert code to
				        Function *hookChc =  cast<Function>(module->getOrInsertFunction("clap_chcHookDynamic",functionType));
				        vector<Value*> entryArgList;
				        vector<Value*> exitArgList;
				        //Function arguments will be 
				        //0. variable count
				        //1. Entry/Exit an int variable : 1 for entry and 0 for exit
				        //2.1. Number of vars : int
				        //5. Finally Send the Function Name 
				        //2. variable name  : char *
				        //3. variable type  : char *
				        //4. variable value : int* (since this is global variable)
				        //-. 2 -3 -4 will be repeated as the # of vars 
				        //So total variable count will be  1+(2-3-4)* variable # +5
				        const int ARGUMENT_COUNT = 2+globVarSet.size(); // See above
				        Constant *argCount = ConstantInt::get(module->getContext(), APInt(32,ARGUMENT_COUNT,true));
				        entryArgList.push_back(argCount);
				        //Entry flag
				        Constant *entry = ConstantInt::get(module->getContext(), APInt(32,1,true));
				        entryArgList.push_back(entry);
					Constant *numOfVars = ConstantInt::get(module->getContext(),APInt(32,operandSet.size(),true));
					entryArgList.push_back(numOfVars);
					entryArgList.push_back(getValueForString(StringRef(functionName.c_str()),module));
				
					//Now iterate it for each vars
					for(Value *v : operandSet) {
						Value *val = v;
						Value *valName = getValueForString (val->getName(),module);
						Value *type = getValueForString(StringRef(getTypeString(val).c_str()).trim(),module);
						entryArgList.push_back(valName);
						entryArgList.push_back(type);
						entryArgList.push_back(val);
					}


					Constant *exit = ConstantInt::get(module->getContext(),APInt(32,0,true));
				        exitArgList.push_back(argCount);
				        exitArgList.push_back(exit);
					exitArgList.push_back(numOfVars);
					exitArgList.push_back(getValueForString(StringRef(functionName.c_str()),module));
					
					for(Value *v : operandSet) {
						Value *val = v;
						Value *valName = getValueForString (val->getName(),module);
						Value *type = getValueForString(StringRef(getTypeString(val).c_str()).trim(),module);
						exitArgList.push_back(valName);
						exitArgList.push_back(type);
						exitArgList.push_back(val);
					}
					

					Instruction *hookChcBeforeInstr = CallInst::Create(hookChc,entryArgList);				
				        hookChcBeforeInstr->insertBefore(internal.front());

				        Instruction *hookChcAfterInstr = CallInst::Create(hookChc,exitArgList);
				        hookChcAfterInstr->insertAfter(internal.back());
				}

				errs()<<"\n********************\n\n";
			}
		}
	}
}





/**
 * This Function will create declfile
 * */

void dumpDeclFileAtEntryAndExit(Function *func,string EntryOrExit) {
	int tabCount  = 0 ;
	static bool flagToWriteVersionIntoDtrace = true;
	static bool flagToWriteFunctionIntoDtrace = true;
	static string declFileName = "program.dtrace"; 
	string versionInfo = "";

	if (!flagToWriteFunctionIntoDtrace) {
		return;
	}

	if (flagToWriteVersionIntoDtrace) {
		fstream declFileHeader(declFileName,ios::in);

		if (isFileEmpty(declFileHeader)) {
			versionInfo = "input-language C/C++\ndecl-version 2.0\nvar-comparability none\n";
			flagToWriteVersionIntoDtrace = false;
			declFileHeader.close();
		}
		else {
			flagToWriteFunctionIntoDtrace = false;
			declFileHeader.close();
			return;
		}
	}
	
	fstream declFile(declFileName,ios::out|ios::app);

	if(declFile.is_open()) {

		StringRef funcName = getDemangledFunctionName(func->getName().trim().str().c_str());// (func->getName().trim().data());
		if(find(programPoints.begin(),programPoints.end(),funcName) != programPoints.end()) {
			declFile<<versionInfo;
			declFile<<"\n";
			declFile<<"ppt .."<<funcName.data();
			//Just Now I discovered that for c  language Daikon is not sending the arguments
			//So commnecting this code for time being
			//for(Function::arg_iterator argItr = func->arg_begin(); argItr != func->arg_end(); ++argItr) {
			//	if(argItr != func->arg_begin()) {
			//		declFile<<",";
			//	}
			//	declFile<<getTypeString(&*argItr);
			//}
			
			if(EntryOrExit == "ENTRY") {
				declFile<<":::ENTER\n";
				tabCount = 1;
				putTabInFile(declFile,tabCount);
				declFile<<"ppt-type enter\n";
			}else if( EntryOrExit == "EXIT") {

				declFile<<":::EXIT0\n";
				tabCount = 1;
				putTabInFile(declFile,tabCount);
				declFile<<"ppt-type subexit\n";
			}
			//Process the Global values
			/*for(vector<Value*>::iterator globalItr = globalList.begin(); globalItr != globalList.end(); ++globalItr) {				
				GlobalVariable *v = static_cast<GlobalVariable*>(*globalItr);
				string varName = v->getName().trim().str();
				tabCount = 1;
				putTabInFile(declFile,tabCount);
				declFile<<"variable ::"<<varName<<"\n";
				tabCount =2;
				putTabInFile(declFile,tabCount);
				declFile<<"var-kind variable\n";
				putTabInFile(declFile,tabCount);
				//declFile<<"rep-type "<<getTypeString(v->getInitializer())<<"\n";
				declFile<<"rep-type "<<"int"<<"\n";
				putTabInFile(declFile,tabCount);
				//declFile<<"dec-type "<<getTypeString(v->getInitializer())<<"\n";
				declFile<<"dec-type "<<"int"<<"\n";
			}*/
			//Process function Params
			for(Function::arg_iterator argItr = func->arg_begin(); argItr != func->arg_end(); ++argItr) {
				Argument *arg = &*argItr;
				Value *v = static_cast<Value*>(arg);
				string varName = v->getName().trim().str();
				string typeString = getTypeString(v);
				StringRef typeStringRef(typeString);

			        if (!isSupportedType(typeStringRef)) {
					continue;
				}

				tabCount = 1;
				putTabInFile(declFile,tabCount);
				declFile<<"variable "<<varName<<"\n";
				tabCount = 2;
				putTabInFile(declFile,tabCount);
				declFile<<"var-kind variable\n";
				putTabInFile(declFile,tabCount);
				declFile<<"rep-type "<<getTypeString(v)<<"\n";
				putTabInFile(declFile,tabCount);
				declFile<<"dec-type "<<getTypeString(v)<<"\n";
				putTabInFile(declFile,tabCount);
				declFile<<"flags is_param\n";
			}

			if(EntryOrExit == "EXIT") {
			    string returnType = getTypeString(func->getReturnType());
			    if (isSupportedType(returnType)){
				tabCount = 1;
				putTabInFile(declFile,tabCount);
				declFile<<"variable return\n";
				tabCount = 2;
				putTabInFile(declFile,tabCount);
				declFile<<"var-kind variable\n";
				putTabInFile(declFile,tabCount);
				declFile<<"rep-type "<<returnType<<"\n";
				putTabInFile(declFile,tabCount);
				declFile<<"dec-type "<<returnType<<"\n";
			    }
			}

		}
		declFile.close();
	}
}

void generateProgramPoints(Module *module) {
	fstream pptFile("ProgramPoints.ppts",ios::out);
	if(pptFile.is_open()) { 		
		string modName = module->getModuleIdentifier();
		pptFile<<"Module_Name : " <<modName<<"\n";
		for(Module::iterator funcItr = module->begin(); funcItr != module->end(); ++funcItr) {
			string functionName (getDemangledFunctionName(funcItr->getName().str().c_str()));
			/*if(doNotInstrument(funcItr->getName())) {
					continue;
			}*/
			Function *func= &*funcItr;
			if(func->size() == 0 ) {
				continue;
			}
			functionName += " \n";
			pptFile<<functionName;
		}
		pptFile<<"\n";
		//pptFile<<"hookAfter";
		pptFile.close();
	}
}

void loadProgramPoints(Module *module) {
	//if(!isInit) {
	//	doInit(module);
	//}

	//string moduleName = module->getModuleIdentifier();
	//StringRef moduleNameRef(moduleName.c_str());
	//moduleNameRef = moduleNameRef.split('.').first.trim();
	ifstream pptFile("ProgramPoints.ppts",ios::in);
	if(pptFile.is_open()){
		string line;
		/*while(getline(pptFile,line)) {
			StringRef lineRef(line.c_str());
			if(lineRef.startswith("Module_Name")) {
				StringRef modName = lineRef.split(':').second.trim().split('.').first.trim();
				if(modName.equals(moduleNameRef.trim())) {					
					break;
				}
			}
		}*/

		while(getline(pptFile,line)){			
			StringRef lineRef(line.c_str());
			lineRef = lineRef.trim();		
			//Load only the program points that are related to this module
			if(lineRef.startswith("Module_Name")) {
				continue;
			}
                        if( lineRef.size() != 0) {
				programPoints.push_back(lineRef.str());
			}

		}
		pptFile.close();
	}
}


};//struct InstTrace

//Register the pass with the llvm
char FaultTrace::ID = 0;
bool FaultTrace::isInit = false;
static RegisterPass<FaultTrace> X("faulttracepass", 
    "Add tracing function calls in program to trace instruction value at runtime", 
    false, false);

}//namespace llfi

